import numpy
import sympy
from sympy import Symbol

e = 0.0001

def f(yii, yi, y, x):
    #print(yii)

    #print(yi)
    return sympy.Eq(yii + (yi)/(2*x) - y, 2/x)


def ysecond(y3, y2, y1, h):
    return (y3 - 2 * y2 + y1)/(h**2)


def yfirst(y2, y1, h):
    return (y2 - y1)/(2*h)


def yend(y2, y1, h):
    return sympy.Eq(0.5 * y2 - 1.2 * ((y2 - y1) / h), 1)


x0 = 0.6
xn = 0.9
h = 0.1
x = [x0]
y = [1.3]


y0 = Symbol("y0")
y1 = Symbol("y1")
y2 = Symbol("y2")
y3 = Symbol("y3")
expr0 = sympy.Eq(y0, 1.3)
expr1 = sympy.Eq(675 * y0 - 1407 * y1 + 725 * y2, 20)
expr2 = sympy.Eq(775 * y1 - 1608 * y2 + 825*y3, 20)
expr3 = sympy.Eq(12*y2 - 11.5 * y3, 1)
#e = 675 * y0 - 1407 * y1 + 725 * y2
v = sympy.Poly(675 * y0 - 1407 * y1 + 725 * y2, y0, y1, y2)



er1 = sympy.Eq(y0, 1.3)
er2 = f(ysecond(y2, y1, y0, 0.1), yfirst(y2, y0, 0.1), y1, 0.7)
er3 = f(ysecond(y3, y2, y1, 0.1), yfirst(y3, y1, 0.1), y2, 0.8)
er4 = yend(y3, y2, 0.1)
print("er2 = ", er2)

print("er3 = ", er3)

oldSol = list(sympy.solve((er1, er2, er3, er4), (y0, y1, y2, y3)).values())
print()

print("a", (expr0, expr1, expr2, expr3))
print("b", (y0, y1, y2, y3))
print(sympy.solve((expr0, expr1, expr2, expr3), (y0, y1, y2, y3)))




i = 1

while True:
    print(x)
    h = h / 2*i
    n = int((xn - x0) / h)
    for j in range(1, n + 1):
        #print("x[j-1]", x[j-1])
        #print(j , " -", x[j - 1] + h)
        #print(round(x[j - 1] + h, 2))
        x.append(round(x[j - 1] + h, 5))
        #print("  ")
    print(n)
    print(x)
    y = []


    sol = []
    for j in range(len(x)):
        t = Symbol("y" + str(j))
        sol.append(t)
        y.append(t)
    y[0] = sympy.Eq(sol[0], 1.3)
    y[-1] = yend(sol[-1], sol[-2], h)
    for j in range(1, len(x) - 1):
        y[j] = f(ysecond(sol[j+1], sol[j], sol[j-1], h), yfirst(sol[j+1], sol[j-1], h), sol[j], x[j])
        print("y[j] = ", y[j])
    #print(y)
    #sol[0] = 1.3
    sol = sympy.solve(tuple(y), tuple(sol))
    print(sol)
    #print(tuple())
    #print(type())
    sol = list(sol.values())
    print(len(y), len(sol))
    print(sol[list(x).index(0.6)])
    print(sol[list(x).index(0.7)])
    print(sol[list(x).index(0.8)])
    print(sol[list(x).index(0.9)])
    print(abs(oldSol[0] - sol[list(x).index(0.6)]) / 15 > e)
    print(abs(oldSol[1] - sol[list(x).index(0.7)]) / 15 > e)
    print((abs(oldSol[0] - sol[list(x).index(0.8)]) / 15 > e))
    print(abs(oldSol[1] - sol[list(x).index(0.9)]) / 15 > e)
    print("Solution to the function with precision e = 0.0001 is ", sol)
    if not ((abs(oldSol[1] - sol[list(x).index(0.9)]) / 15 > e) or (abs(oldSol[0] - sol[list(x).index(0.8)]) / 15 > e) or
            (abs(oldSol[1] - sol[list(x).index(0.7)]) / 15 > e) or (abs(oldSol[0] - sol[list(x).index(0.6)]) / 15 > e)):
        break


